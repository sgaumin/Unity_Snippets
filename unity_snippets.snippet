<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets
	xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>Unity RequireComponent</Title>
			<Shortcut>reqc</Shortcut>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>Component</ID>
					<ToolTip>Component name.</ToolTip>
					<Default>Animator</Default>
				</Literal>
			</Declarations>
			<Code Language="CSharp">
				<![CDATA[[RequireComponent(typeof($Component$))]$end$]]>
			</Code>
		</Snippet>
	</CodeSnippet>
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>Unity Debug Log</Title>
			<Shortcut>log</Shortcut>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>Message</ID>
					<ToolTip>Debug message.</ToolTip>
					<Default>Houba</Default>
				</Literal>
			</Declarations>
			<Code Language="CSharp">
				<![CDATA[Debug.Log($$"$Message$");$end$]]>
			</Code>
		</Snippet>
	</CodeSnippet>
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>Unity GetComponent</Title>
			<Shortcut>gc</Shortcut>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>Var</ID>
					<ToolTip>Variable name.</ToolTip>
					<Default>anim</Default>
				</Literal>
				<Literal>
					<ID>Name</ID>
					<ToolTip>Component name.</ToolTip>
					<Default>Animator</Default>
				</Literal>
			</Declarations>
			<Code Language="CSharp">
				<![CDATA[$Var$ = GetComponent<$Name$>();$end$]]>
			</Code>
		</Snippet>
	</CodeSnippet>
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>Unity Header</Title>
			<Shortcut>hea</Shortcut>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>Name</ID>
					<ToolTip>Component name.</ToolTip>
					<Default>Parameters</Default>
				</Literal>
			</Declarations>
			<Code Language="CSharp">
				<![CDATA[[Header("$Name$")]$end$]]>
			</Code>
		</Snippet>
	</CodeSnippet>
  <CodeSnippet Format="1.0.0">
	<Header>
	  <Title>DOTWeen TO method</Title>
	  <Shortcut>doto</Shortcut>
	</Header>
	<Snippet>
	  <Declarations>
		<Literal>
		  <ID>Variable</ID>
		  <ToolTip>Variable name.</ToolTip>
		  <Default>Variable</Default>
		</Literal>
	  </Declarations>
	  <Code Language="CSharp">
		<![CDATA[DOTween.To(() => $Variable$, x => $Variable$ = x, 8, 4f).SetEase(Ease.Linear).Play();$end$]]>
	  </Code>
	</Snippet>
  </CodeSnippet>
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>Unity Coroutine</Title>
			<Shortcut>core</Shortcut>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>Name</ID>
					<ToolTip>Method name.</ToolTip>
					<Default>Core</Default>
				</Literal>
				<Literal>
					<ID>Code</ID>
					<ToolTip>Method content.</ToolTip>
					<Default></Default>
				</Literal>
				<Literal>
					<ID>Duration</ID>
					<ToolTip>Time duration.</ToolTip>
					<Default>1f</Default>
				</Literal>
			</Declarations>
			<Code Language="CSharp">
				<![CDATA[private IEnumerator $Name$()
			{
				$Code$

				yield return new WaitForSeconds($Duration$);
			}$end$]]>
			</Code>
		</Snippet>
	</CodeSnippet>
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>Private Method</Title>
			<Shortcut>met</Shortcut>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>Access</ID>
					<ToolTip>Method access modifier.</ToolTip>
					<Default>private</Default>
				</Literal>
				<Literal>
					<ID>Type</ID>
					<ToolTip>Method type.</ToolTip>
					<Default>void</Default>
				</Literal>
				<Literal>
					<ID>Name</ID>
					<ToolTip>Method name.</ToolTip>
					<Default>Name</Default>
				</Literal>
				<Literal>
					<ID>Code</ID>
					<ToolTip>Method content.</ToolTip>
					<Default></Default>
				</Literal>
			</Declarations>
			<Code Language="CSharp">
				<![CDATA[$Access$ $Type$ $Name$()
			{
				$Code$
			}$end$]]>
			</Code>
		</Snippet>
	</CodeSnippet>
  <CodeSnippet Format="1.0.0">
	<Header>
	  <Title>Public Method with Unity Coroutine</Title>
	  <Shortcut>metc</Shortcut>
	</Header>
	<Snippet>
	  <Declarations>
		<Literal>
		  <ID>Access</ID>
		  <ToolTip>Method access modifier.</ToolTip>
		  <Default>public</Default>
		</Literal>
		<Literal>
		  <ID>Type</ID>
		  <ToolTip>Method type.</ToolTip>
		  <Default>void</Default>
		</Literal>
		<Literal>
		  <ID>Name</ID>
		  <ToolTip>Method name.</ToolTip>
		  <Default>Name</Default>
		</Literal>
		<Literal>
		  <ID>Code</ID>
		  <ToolTip>Method content.</ToolTip>
		  <Default></Default>
		</Literal>
		<Literal>
		  <ID>Duration</ID>
		  <ToolTip>Time duration.</ToolTip>
		  <Default>1f</Default>
		</Literal>
	  </Declarations>
	  <Code Language="CSharp">
		<![CDATA[$Access$ $Type$ $Name$()
			{
				StartCoroutine($Name$Core());
			}
		
		private IEnumerator $Name$Core()
			{


				yield return new WaitForSeconds($Duration$);
			}$end$]]>
	  </Code>
	</Snippet>
  </CodeSnippet>
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>Singleton</Title>
			<Shortcut>sing</Shortcut>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>Name</ID>
					<ToolTip>Class name.</ToolTip>
					<Default>GameSystem</Default>
				</Literal>
			</Declarations>
			<Code Language="CSharp">
				<![CDATA[public static $Name$ Instance {get; private set;}
			
			protected void Awake() => Instance = this;$end$]]>
			</Code>
		</Snippet>
	</CodeSnippet>
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>Singleton DontDestroyOnLoad</Title>
			<Shortcut>singd</Shortcut>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>Name</ID>
					<ToolTip>Class name.</ToolTip>
					<Default>MusicPlayer</Default>
				</Literal>
			</Declarations>
			<Code Language="CSharp">
				<![CDATA[public static $Name$ Instance {get; private set;}
			
		   protected void Awake()
	{
		if (Instance == null)
		{
			Instance = this;
			DontDestroyOnLoad(gameObject);
		}
		else
		{
			Destroy(gameObject);
		}
	}$end$]]>
			</Code>
		</Snippet>
	</CodeSnippet>
	<CodeSnippet Format="1.0.0">
	  <Header>
		<Title>Scriptable Object</Title>
		<Shortcut>scrip</Shortcut>
	  </Header>
	  <Snippet>
		<Declarations>
		  <Literal>
			<ID>Name</ID>
			<ToolTip>Class name.</ToolTip>
			<Default>CharacterStats</Default>
		  </Literal>
		</Declarations>
		<Code Language="CSharp">
		  <![CDATA[using UnityEngine;

  [CreateAssetMenu(fileName = "Data", menuName = "$Name$", order = 1)]
  public class $Name$ : ScriptableObject
  {

		}$end$]]>
		</Code>
	  </Snippet>
	</CodeSnippet>
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>Unity Coroutine Wait</Title>
			<Shortcut>wait</Shortcut>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>Duration</ID>
					<ToolTip>Time duration.</ToolTip>
					<Default>1f</Default>
				</Literal>
			</Declarations>
			<Code Language="CSharp">
				<![CDATA[yield return new WaitForSeconds($Duration$);$end$]]>
			</Code>
		</Snippet>
	</CodeSnippet>
	<CodeSnippet Format="1.0.0">
	  <Header>
		<Title>Unity Context Menu</Title>
		<Shortcut>contm</Shortcut>
	  </Header>
		<Snippet>
		  <Declarations>
			<Literal>
			  <ID>Name</ID>
			  <ToolTip>Method name.</ToolTip>
			  <Default>Name</Default>
			</Literal>
		  </Declarations>
		  <Code Language="CSharp">
			<![CDATA[[ContextMenu("$Name$")]$end$]]>
		  </Code>
		</Snippet>
	</CodeSnippet>
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>Inspector Value</Title>
			<Shortcut>ins</Shortcut>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>Type</ID>
					<Default>float</Default>
				</Literal>
				<Literal>
					<ID>Name</ID>
					<Default>variableName</Default>
				</Literal>
			</Declarations>
			<Code Language="CSharp">
				<![CDATA[[SerializeField] private $Type$ $Name$;$end$]]>
			</Code>
		</Snippet>
	</CodeSnippet>
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>MinMax Inspector Value</Title>
			<Shortcut>minmax</Shortcut>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>Type</ID>
					<Default>float</Default>
				</Literal>
				<Literal>
					<ID>Name</ID>
					<Default>variableName</Default>
				</Literal>
				<Literal>
					<ID>Min</ID>
					<Default>1f</Default>
				</Literal>
				<Literal>
					<ID>Max</ID>
					<Default>3f</Default>
				</Literal>
				<Literal>
					<ID>MinLimit</ID>
					<Default>0f</Default>
				</Literal>
				<Literal>
					<ID>MaxLimit</ID>
					<Default>10f</Default>
				</Literal>
			</Declarations>
			<Code Language="CSharp">
				<![CDATA[[SerializeField, MinMaxSlider($MinLimit$, $MaxLimit$)] private MinMax $Name$ = new MinMax($Min$, $Max$);$end$]]>
			</Code>
		</Snippet>
	</CodeSnippet>
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>ToString</Title>
			<Shortcut>tostring</Shortcut>
		</Header>
		<Snippet>
			<Code Language="CSharp">
				<![CDATA[public override string ToString() => $$"$end$";]]>
			</Code>
		</Snippet>
	</CodeSnippet>
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>Awake</Title>
			<Shortcut>awake</Shortcut>
		</Header>
		<Snippet>
			<Code Language="CSharp">
				<![CDATA[protected void Awake()
{
	$end$
}]]>
			</Code>
		</Snippet>
	</CodeSnippet>
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>Start</Title>
			<Shortcut>start</Shortcut>
		</Header>
		<Snippet>
			<Code Language="CSharp">
				<![CDATA[protected void Start()
{
	$end$
}]]>
			</Code>
		</Snippet>
	</CodeSnippet>
</CodeSnippets>
